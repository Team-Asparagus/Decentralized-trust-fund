{
  "address": "0xcb6bD8922291628E38e7993d3FF008e732eC5BA0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_beneficiaries",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_trustee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountWithdrawable",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "DecentralizedTrustFund_MustDepositValidAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "DecentralizedTrustFund_SufficentTimeNotElapsed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustee",
          "type": "address"
        }
      ],
      "name": "addTrustee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "approveDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_target",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositToAave",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustees",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustee",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "removeTrustee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawDai",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd70b53e478be5c2553ad54d1e1053a5fdd9ca2507c78dabb1898ea9387d4a62a",
  "receipt": {
    "to": null,
    "from": "0x9aaa7df667c76155D8Cc85CBb95738Bb8074Ac4e",
    "contractAddress": "0xcb6bD8922291628E38e7993d3FF008e732eC5BA0",
    "transactionIndex": 5,
    "gasUsed": "2180356",
    "logsBloom": "0x
    "blockHash": "0x40374084eba9c02f158e7ea186009cfe0bd9c562b6244b03f7951f7d3ece95b5",
    "transactionHash": "0xd70b53e478be5c2553ad54d1e1053a5fdd9ca2507c78dabb1898ea9387d4a62a",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 27056622,
        "transactionHash": "0xd70b53e478be5c2553ad54d1e1053a5fdd9ca2507c78dabb1898ea9387d4a62a",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000009aaa7df667c76155d8cc85cbb95738bb8074ac4e",
          "0x000000000000000000000000f903ba9e006193c1527bfbe65fe2123704ea3f99"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000f8d3d35cf3b1880000000000000000000000000000000000000000000000000402cf23a11914ee0000000000000000000000000000000000000000000004442c78ac870f5e2b460000000000000000000000000000000000000000000000000309fb50442563660000000000000000000000000000000000000000000004442d71805a6c51dcce",
        "logIndex": 22,
        "blockHash": "0x40374084eba9c02f158e7ea186009cfe0bd9c562b6244b03f7951f7d3ece95b5"
      }
    ],
    "blockNumber": 27056622,
    "cumulativeGasUsed": "3357075",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xfb876653069cbfc67bCB7661564136ea670c247E",
      "0x6db649efE9CeDC4178e379565A5415A64F362ED0"
    ],
    "0x9aaa7df667c76155D8Cc85CBb95738Bb8074Ac4e",
    600,
    "0x6db649efE9CeDC4178e379565A5415A64F362ED0",
    1000
  ],
  "numDeployments": 1,
  "solcInputHash": "a421983f1aae8687cc9993950f22522e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_beneficiaries\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountWithdrawable\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"DecentralizedTrustFund_MustDepositValidAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"DecentralizedTrustFund_SufficentTimeNotElapsed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"}],\"name\":\"addTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"approveDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_target\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositToAave\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustees\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustee\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"removeTrustee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawDai\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"token\":{\"details\":\"hardcoded stable coin addresses to be refactored\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DecentralizedTrustFund.sol\":\"DecentralizedTrustFund\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"contracts/DecentralizedTrustFund.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.7;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\nerror DecentralizedTrustFund_MustDepositValidAmount();\\r\\nerror DecentralizedTrustFund_SufficentTimeNotElapsed();\\r\\n\\r\\ncontract DecentralizedTrustFund is KeeperCompatibleInterface {\\r\\n    address[] private trustees;\\r\\n    uint256 private ethBalance;\\r\\n    uint256 private daiBalance;\\r\\n    uint256 private interval;\\r\\n    uint256 private amountWithdrawable;\\r\\n    address private owner;\\r\\n    address[] private beneficiaries;\\r\\n    address[2] whiteLists;\\r\\n    mapping (address => uint256) private addressToAmount;\\r\\n    mapping (address => bool) private isBeneficiaries;\\r\\n    mapping (address => bool) private isTrustee;\\r\\n    mapping (address => uint256) private lastTimestamp;\\r\\n    mapping (address => bool) private isWhiteList;\\r\\n    /// @dev hardcoded stable coin addresses to be refactored\\r\\n    IERC20 private token = IERC20(0xd393b1E02dA9831Ff419e22eA105aAe4c47E1253);\\r\\n\\r\\n    modifier onlyOwner(){\\r\\n        require(msg.sender == owner, \\\"Operation restricted to owner\\\");\\r\\n        _;\\r\\n    }\\r\\n    modifier onlyTrustee(){\\r\\n        require(isTrustee[msg.sender] == true || msg.sender == owner, \\\"Operation restricted to trustees\\\");\\r\\n        _;\\r\\n    }\\r\\n    event Deposited(address depositor, uint256 amount);\\r\\n\\r\\n\\r\\n\\r\\nconstructor(address[] memory _beneficiaries, address _owner, uint256 _interval, address _trustee, uint256 _amountWithdrawable){\\r\\n    for(uint i = 0; i< _beneficiaries.length; i++){\\r\\n        isBeneficiaries[_beneficiaries[i]] = true;\\r\\n        lastTimestamp[_beneficiaries[i]] = block.timestamp;\\r\\n    }\\r\\n    whiteLists = [0xd393b1E02dA9831Ff419e22eA105aAe4c47E1253, 0xd393b1E02Da9831EF419E22eA105aae4C47E1253];\\r\\n    for(uint i = 0; i< whiteLists.length; i++){\\r\\n        isWhiteList[whiteLists[i]] = true;\\r\\n    }\\r\\n        owner = _owner;\\r\\n        beneficiaries = _beneficiaries;\\r\\n        interval = _interval;\\r\\n        isTrustee[_trustee] = true;\\r\\n        trustees.push(_trustee);\\r\\n        amountWithdrawable = _amountWithdrawable;\\r\\n    }\\r\\n\\r\\n    function approveDeposit(uint _amount) public {\\r\\n        token.approve(address(this), _amount);\\r\\n    }\\r\\n\\r\\n    function depositDai(uint _amount) public {\\r\\n        uint allowance = token.allowance(msg.sender, address(this));\\r\\n        require(allowance >= _amount, \\\"Check the token allowance\\\");\\r\\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\\r\\n        require(success, \\\"Transfer failed\\\");\\r\\n    }\\r\\n    function withdrawDai(uint256 _amount) public onlyOwner {\\r\\n        require(token.balanceOf(address(this)) >= _amount);\\r\\n        token.transfer(msg.sender, _amount);\\r\\n    }\\r\\n\\r\\n    function addTrustee(address _trustee) public onlyOwner {\\r\\n        isTrustee[_trustee] = true;\\r\\n        trustees.push(_trustee);\\r\\n    }\\r\\n    function removeTrustee(address _trustee, uint _index) public onlyOwner {\\r\\n        require(_index < trustees.length, \\\"index out of bound\\\");\\r\\n        isTrustee[_trustee] = false;\\r\\n        address[] memory _trustees = trustees;\\r\\n        for (uint i = _index; i < _trustees.length - 1; i++) {\\r\\n            _trustees[i] = _trustees[i + 1];\\r\\n        }\\r\\n        trustees = _trustees;\\r\\n        trustees.pop();\\r\\n    }\\r\\n\\r\\n    function getTrustees() public view returns(address[] memory) {\\r\\n        return trustees;\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(bytes memory /* checkData */ ) public view override returns (\\r\\n            bool upkeepNeeded,\\r\\n            bytes memory /* performData */\\r\\n        ){\\r\\n         if(block.timestamp - lastTimestamp[msg.sender] >= interval){\\r\\n             upkeepNeeded = true;\\r\\n         } else {\\r\\n             upkeepNeeded = false;\\r\\n         }\\r\\n        }\\r\\n    \\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        (bool enoughTimePassed, ) = checkUpkeep(\\\"\\\");\\r\\n        if(!enoughTimePassed){\\r\\n            revert DecentralizedTrustFund_SufficentTimeNotElapsed();\\r\\n        }\\r\\n        token.transfer(msg.sender, amountWithdrawable);\\r\\n        lastTimestamp[msg.sender] = block.timestamp;\\r\\n    }\\r\\n\\r\\n    function depositEth() public payable {\\r\\n        if(msg.value == 0){\\r\\n            revert DecentralizedTrustFund_MustDepositValidAmount();\\r\\n        }\\r\\n        ethBalance += msg.value;\\r\\n        addressToAmount[msg.sender] += msg.value;\\r\\n        emit Deposited(msg.sender, msg.value);\\r\\n    }\\r\\n\\r\\n    function decode(bytes calldata data) private pure returns(string memory functionName){\\r\\n       (functionName) = abi.decode(data, (string));\\r\\n    }\\r\\n\\r\\n    function depositToAave(bytes calldata _data, address _asset, address _target, uint256 _amount) public {\\r\\n        require(isWhiteList[_target], \\\"Target contract is not whitelisted\\\");\\r\\n        string memory funcName = decode(_data);\\r\\n        (bool success, ) = _target.call{value: 0}(abi.encodeWithSignature(funcName, _asset, _amount, owner, 0));\\r\\n        require(success, \\\"Deposit to aave failed\\\");\\r\\n\\r\\n    }\\r\\n\\r\\n \\r\\n    function getOwner() public view returns(address) {\\r\\n        return owner;\\r\\n    }\\r\\n    \\r\\n    fallback() external payable {\\r\\n        depositEth();\\r\\n    }\\r\\n\\r\\n    receive() external payable {\\r\\n        depositEth();\\r\\n    }\\r\\n\\r\\n\\r\\n}\",\"keccak256\":\"0x594396b81d297c3673bed2450a7a8ac50e1bb3a1c14a33074dd66d8ce6d5ac9a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106100a05760003560e01c8063893d20e811610064578063893d20e81461017c57806393a991af146101a7578063ac8a1ac3146101d0578063beffaf09146101f9578063dc78ac1c14610224578063fb2ad4481461024d576100af565b80631409ff6e146100b957806335842f74146100e2578063439370b11461010b5780634585e33b146101155780636e04ff0d1461013e576100af565b366100af576100ad610276565b005b6100b7610276565b005b3480156100c557600080fd5b506100e060048036038101906100db91906114bd565b61035b565b005b3480156100ee57600080fd5b50610109600480360381019061010491906114bd565b61040e565b005b610113610276565b005b34801561012157600080fd5b5061013c60048036038101906101379190611356565b6105fc565b005b34801561014a57600080fd5b506101656004803603810190610160919061142b565b61074b565b60405161017392919061187e565b60405180910390f35b34801561018857600080fd5b506101916107b5565b60405161019e9190611773565b60405180910390f35b3480156101b357600080fd5b506101ce60048036038101906101c991906114bd565b6107df565b005b3480156101dc57600080fd5b506101f760048036038101906101f291906113a3565b6109d9565b005b34801561020557600080fd5b5061020e610bd7565b60405161021b919061185c565b60405180910390f35b34801561023057600080fd5b5061024b600480360381019061024691906112bc565b610c65565b005b34801561025957600080fd5b50610274600480360381019061026f91906112e9565b610db3565b005b60003414156102b1576040517fbb1b03c100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b34600160008282546102c39190611a7c565b9250508190555034600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103199190611a7c565b925050819055507f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c433346040516103519291906117ee565b60405180910390a1565b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b330836040518363ffffffff1660e01b81526004016103b89291906117ee565b602060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061040a9190611329565b5050565b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b815260040161046d92919061178e565b60206040518083038186803b15801561048557600080fd5b505afa158015610499573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bd91906114ea565b905081811015610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f9906118ee565b60405180910390fd5b6000600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b8152600401610563939291906117b7565b602060405180830381600087803b15801561057d57600080fd5b505af1158015610591573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b59190611329565b9050806105f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105ee906118ae565b60405180910390fd5b505050565b60006106166040518060200160405280600081525061074b565b50905080610650576040517f09af1f1d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb336004546040518363ffffffff1660e01b81526004016106af9291906117ee565b602060405180830381600087803b1580156106c957600080fd5b505af11580156106dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107019190611329565b5042600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b60006060600354600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544261079d9190611ad2565b106107ab57600191506107b0565b600091505b915091565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461086f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108669061192e565b60405180910390fd5b80600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016108cb9190611773565b60206040518083038186803b1580156108e357600080fd5b505afa1580156108f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091b91906114ea565b101561092657600080fd5b600e60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b81526004016109839291906117ee565b602060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d59190611329565b5050565b600d60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16610a65576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5c906118ce565b60405180910390fd5b6000610a718686611072565b905060008373ffffffffffffffffffffffffffffffffffffffff166000838786600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000604051602401610ac99493929190611817565b60405160208183030381529060405290604051610ae6919061175c565b60405180910390207bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610b489190611745565b60006040518083038185875af1925050503d8060008114610b85576040519150601f19603f3d011682016040523d82523d6000602084013e610b8a565b606091505b5050905080610bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc59061194e565b60405180910390fd5b50505050505050565b60606000805480602002602001604051908101604052809291908181526020018280548015610c5b57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610c11575b5050505050905090565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610cf5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cec9061192e565b60405180910390fd5b6001600b60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610e43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3a9061192e565b60405180910390fd5b6000805490508110610e8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e819061190e565b60405180910390fd5b6000600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550600080805480602002602001604051908101604052809291908181526020018280548015610f6557602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610f1b575b5050505050905060008290505b60018251610f809190611ad2565b81101561100e5781600182610f959190611a7c565b81518110610fa657610fa5611c87565b5b6020026020010151828281518110610fc157610fc0611c87565b5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050808061100690611be0565b915050610f72565b50806000908051906020019061102592919061108b565b50600080548061103857611037611c58565b5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690559055505050565b606082828101906110839190611474565b905092915050565b828054828255906000526020600020908101928215611104579160200282015b828111156111035782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906110ab565b5b5090506111119190611115565b5090565b5b8082111561112e576000816000905550600101611116565b5090565b600061114561114084611993565b61196e565b90508281526020810184848401111561116157611160611cf4565b5b61116c848285611b6d565b509392505050565b6000611187611182846119c4565b61196e565b9050828152602081018484840111156111a3576111a2611cf4565b5b6111ae848285611b6d565b509392505050565b6000813590506111c581611e30565b92915050565b6000815190506111da81611e47565b92915050565b60008083601f8401126111f6576111f5611cea565b5b8235905067ffffffffffffffff81111561121357611212611ce5565b5b60208301915083600182028301111561122f5761122e611cef565b5b9250929050565b600082601f83011261124b5761124a611cea565b5b813561125b848260208601611132565b91505092915050565b600082601f83011261127957611278611cea565b5b8135611289848260208601611174565b91505092915050565b6000813590506112a181611e5e565b92915050565b6000815190506112b681611e5e565b92915050565b6000602082840312156112d2576112d1611cfe565b5b60006112e0848285016111b6565b91505092915050565b60008060408385031215611300576112ff611cfe565b5b600061130e858286016111b6565b925050602061131f85828601611292565b9150509250929050565b60006020828403121561133f5761133e611cfe565b5b600061134d848285016111cb565b91505092915050565b6000806020838503121561136d5761136c611cfe565b5b600083013567ffffffffffffffff81111561138b5761138a611cf9565b5b611397858286016111e0565b92509250509250929050565b6000806000806000608086880312156113bf576113be611cfe565b5b600086013567ffffffffffffffff8111156113dd576113dc611cf9565b5b6113e9888289016111e0565b955095505060206113fc888289016111b6565b935050604061140d888289016111b6565b925050606061141e88828901611292565b9150509295509295909350565b60006020828403121561144157611440611cfe565b5b600082013567ffffffffffffffff81111561145f5761145e611cf9565b5b61146b84828501611236565b91505092915050565b60006020828403121561148a57611489611cfe565b5b600082013567ffffffffffffffff8111156114a8576114a7611cf9565b5b6114b484828501611264565b91505092915050565b6000602082840312156114d3576114d2611cfe565b5b60006114e184828501611292565b91505092915050565b600060208284031215611500576114ff611cfe565b5b600061150e848285016112a7565b91505092915050565b6000611523838361152f565b60208301905092915050565b61153881611b06565b82525050565b61154781611b06565b82525050565b600061155882611a05565b6115628185611a33565b935061156d836119f5565b8060005b8381101561159e5781516115858882611517565b975061159083611a26565b925050600181019050611571565b5085935050505092915050565b6115b481611b18565b82525050565b60006115c582611a10565b6115cf8185611a44565b93506115df818560208601611b7c565b6115e881611d03565b840191505092915050565b60006115fe82611a10565b6116088185611a55565b9350611618818560208601611b7c565b80840191505092915050565b61162d81611b5b565b82525050565b600061163e82611a1b565b6116488185611a71565b9350611658818560208601611b7c565b80840191505092915050565b6000611671600f83611a60565b915061167c82611d14565b602082019050919050565b6000611694602283611a60565b915061169f82611d3d565b604082019050919050565b60006116b7601983611a60565b91506116c282611d8c565b602082019050919050565b60006116da601283611a60565b91506116e582611db5565b602082019050919050565b60006116fd601d83611a60565b915061170882611dde565b602082019050919050565b6000611720601683611a60565b915061172b82611e07565b602082019050919050565b61173f81611b44565b82525050565b600061175182846115f3565b915081905092915050565b60006117688284611633565b915081905092915050565b6000602082019050611788600083018461153e565b92915050565b60006040820190506117a3600083018561153e565b6117b0602083018461153e565b9392505050565b60006060820190506117cc600083018661153e565b6117d9602083018561153e565b6117e66040830184611736565b949350505050565b6000604082019050611803600083018561153e565b6118106020830184611736565b9392505050565b600060808201905061182c600083018761153e565b6118396020830186611736565b611846604083018561153e565b6118536060830184611624565b95945050505050565b60006020820190508181036000830152611876818461154d565b905092915050565b600060408201905061189360008301856115ab565b81810360208301526118a581846115ba565b90509392505050565b600060208201905081810360008301526118c781611664565b9050919050565b600060208201905081810360008301526118e781611687565b9050919050565b60006020820190508181036000830152611907816116aa565b9050919050565b60006020820190508181036000830152611927816116cd565b9050919050565b60006020820190508181036000830152611947816116f0565b9050919050565b6000602082019050818103600083015261196781611713565b9050919050565b6000611978611989565b90506119848282611baf565b919050565b6000604051905090565b600067ffffffffffffffff8211156119ae576119ad611cb6565b5b6119b782611d03565b9050602081019050919050565b600067ffffffffffffffff8211156119df576119de611cb6565b5b6119e882611d03565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611a8782611b44565b9150611a9283611b44565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611ac757611ac6611c29565b5b828201905092915050565b6000611add82611b44565b9150611ae883611b44565b925082821015611afb57611afa611c29565b5b828203905092915050565b6000611b1182611b24565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b6000611b6682611b4e565b9050919050565b82818337600083830152505050565b60005b83811015611b9a578082015181840152602081019050611b7f565b83811115611ba9576000848401525b50505050565b611bb882611d03565b810181811067ffffffffffffffff82111715611bd757611bd6611cb6565b5b80604052505050565b6000611beb82611b44565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611c1e57611c1d611c29565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f5472616e73666572206661696c65640000000000000000000000000000000000600082015250565b7f54617267657420636f6e7472616374206973206e6f742077686974656c69737460008201527f6564000000000000000000000000000000000000000000000000000000000000602082015250565b7f436865636b2074686520746f6b656e20616c6c6f77616e636500000000000000600082015250565b7f696e646578206f7574206f6620626f756e640000000000000000000000000000600082015250565b7f4f7065726174696f6e207265737472696374656420746f206f776e6572000000600082015250565b7f4465706f73697420746f2061617665206661696c656400000000000000000000600082015250565b611e3981611b06565b8114611e4457600080fd5b50565b611e5081611b18565b8114611e5b57600080fd5b50565b611e6781611b44565b8114611e7257600080fd5b5056fea2646970667358221220ff3b8107d9fcd2ac83996a9b00e8e5cacf11391d44a7708593f8e8a2d92831c564736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "token": {
        "details": "hardcoded stable coin addresses to be refactored"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 109,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "trustees",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 111,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "ethBalance",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 113,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "daiBalance",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 115,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "interval",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 117,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "amountWithdrawable",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 119,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "beneficiaries",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 126,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "whiteLists",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_address)2_storage"
      },
      {
        "astId": 130,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "addressToAmount",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 134,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "isBeneficiaries",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 138,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "isTrustee",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 142,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "lastTimestamp",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 146,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "isWhiteList",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 153,
        "contract": "contracts/DecentralizedTrustFund.sol:DecentralizedTrustFund",
        "label": "token",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IERC20)96"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)2_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[2]",
        "numberOfBytes": "64"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)96": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}