{
  "language": "Solidity",
  "sources": {
    "contracts/DecentralizedTrustFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\";\r\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\r\n\r\nerror DecentralizedTrustFund_MustDepositValidAmount();\r\nerror DecentralizedTrustFund_SufficentTimeNotElapsed();\r\n\r\ncontract DecentralizedTrustFund is KeeperCompatibleInterface {\r\n    address[] private trustees;\r\n    uint256 private ethBalance;\r\n    uint256 private daiBalance;\r\n    uint256 private interval;\r\n    uint256 private amountWithdrawable;\r\n    address private owner;\r\n    address[] private beneficiaries;\r\n    address[2] whiteLists;\r\n    mapping (address => uint256) private addressToAmount;\r\n    mapping (address => bool) private isBeneficiaries;\r\n    mapping (address => bool) private isTrustee;\r\n    mapping (address => uint256) private lastTimestamp;\r\n    mapping (address => bool) private isWhiteList;\r\n    /// @dev hardcoded stable coin addresses to be refactored\r\n    IERC20 private token = IERC20(0xd393b1E02dA9831Ff419e22eA105aAe4c47E1253);\r\n\r\n    modifier onlyOwner(){\r\n        require(msg.sender == owner, \"Operation restricted to owner\");\r\n        _;\r\n    }\r\n    modifier onlyTrustee(){\r\n        require(isTrustee[msg.sender] == true || msg.sender == owner, \"Operation restricted to trustees\");\r\n        _;\r\n    }\r\n    event Deposited(address depositor, uint256 amount);\r\n\r\n\r\n\r\nconstructor(address[] memory _beneficiaries, address _owner, uint256 _interval, address _trustee, uint256 _amountWithdrawable){\r\n    for(uint i = 0; i< _beneficiaries.length; i++){\r\n        isBeneficiaries[_beneficiaries[i]] = true;\r\n        lastTimestamp[_beneficiaries[i]] = block.timestamp;\r\n    }\r\n    whiteLists = [0xd393b1E02dA9831Ff419e22eA105aAe4c47E1253, 0xd393b1E02Da9831EF419E22eA105aae4C47E1253];\r\n    for(uint i = 0; i< whiteLists.length; i++){\r\n        isWhiteList[whiteLists[i]] = true;\r\n    }\r\n        owner = _owner;\r\n        beneficiaries = _beneficiaries;\r\n        interval = _interval;\r\n        isTrustee[_trustee] = true;\r\n        trustees.push(_trustee);\r\n        amountWithdrawable = _amountWithdrawable;\r\n    }\r\n\r\n    function approveDeposit(uint _amount) public {\r\n        token.approve(address(this), _amount);\r\n    }\r\n\r\n    function depositDai(uint _amount) public {\r\n        uint allowance = token.allowance(msg.sender, address(this));\r\n        require(allowance >= _amount, \"Check the token allowance\");\r\n        bool success = token.transferFrom(msg.sender, address(this), _amount);\r\n        require(success, \"Transfer failed\");\r\n    }\r\n    function withdrawDai(uint256 _amount) public onlyOwner {\r\n        require(token.balanceOf(address(this)) >= _amount);\r\n        token.transfer(msg.sender, _amount);\r\n    }\r\n\r\n    function addTrustee(address _trustee) public onlyOwner {\r\n        isTrustee[_trustee] = true;\r\n        trustees.push(_trustee);\r\n    }\r\n    function removeTrustee(address _trustee, uint _index) public onlyOwner {\r\n        require(_index < trustees.length, \"index out of bound\");\r\n        isTrustee[_trustee] = false;\r\n        address[] memory _trustees = trustees;\r\n        for (uint i = _index; i < _trustees.length - 1; i++) {\r\n            _trustees[i] = _trustees[i + 1];\r\n        }\r\n        trustees = _trustees;\r\n        trustees.pop();\r\n    }\r\n\r\n    function getTrustees() public view returns(address[] memory) {\r\n        return trustees;\r\n    }\r\n\r\n    function checkUpkeep(bytes memory /* checkData */ ) public view override returns (\r\n            bool upkeepNeeded,\r\n            bytes memory /* performData */\r\n        ){\r\n         if(block.timestamp - lastTimestamp[msg.sender] >= interval){\r\n             upkeepNeeded = true;\r\n         } else {\r\n             upkeepNeeded = false;\r\n         }\r\n        }\r\n    \r\n    function performUpkeep(bytes calldata /* performData */) external override {\r\n        (bool enoughTimePassed, ) = checkUpkeep(\"\");\r\n        if(!enoughTimePassed){\r\n            revert DecentralizedTrustFund_SufficentTimeNotElapsed();\r\n        }\r\n        token.transfer(msg.sender, amountWithdrawable);\r\n        lastTimestamp[msg.sender] = block.timestamp;\r\n    }\r\n\r\n    function depositEth() public payable {\r\n        if(msg.value == 0){\r\n            revert DecentralizedTrustFund_MustDepositValidAmount();\r\n        }\r\n        ethBalance += msg.value;\r\n        addressToAmount[msg.sender] += msg.value;\r\n        emit Deposited(msg.sender, msg.value);\r\n    }\r\n\r\n    function decode(bytes calldata data) private pure returns(string memory functionName){\r\n       (functionName) = abi.decode(data, (string));\r\n    }\r\n\r\n    function depositToAave(bytes calldata _data, address _asset, address _target, uint256 _amount) public {\r\n        require(isWhiteList[_target], \"Target contract is not whitelisted\");\r\n        string memory funcName = decode(_data);\r\n        (bool success, ) = _target.call{value: 0}(abi.encodeWithSignature(funcName, _asset, _amount, owner, 0));\r\n        require(success, \"Deposit to aave failed\");\r\n\r\n    }\r\n\r\n \r\n    function getOwner() public view returns(address) {\r\n        return owner;\r\n    }\r\n    \r\n    fallback() external payable {\r\n        depositEth();\r\n    }\r\n\r\n    receive() external payable {\r\n        depositEth();\r\n    }\r\n\r\n\r\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface KeeperCompatibleInterface {\n  /**\n   * @notice method that is simulated by the keepers to see if any work actually\n   * needs to be performed. This method does does not actually need to be\n   * executable, and since it is only ever simulated it can consume lots of gas.\n   * @dev To ensure that it is never called, you may want to add the\n   * cannotExecute modifier from KeeperBase to your implementation of this\n   * method.\n   * @param checkData specified in the upkeep registration so it is always the\n   * same for a registered upkeep. This can easily be broken down into specific\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\n   * same contract and easily differentiated by the contract.\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\n   * performUpkeep or not.\n   * @return performData bytes that the keeper should call performUpkeep with, if\n   * upkeep is needed. If you would like to encode data to decode later, try\n   * `abi.encode`.\n   */\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\n\n  /**\n   * @notice method that is actually executed by the keepers, via the registry.\n   * The data returned by the checkUpkeep simulation will be passed into\n   * this method to actually be executed.\n   * @dev The input to this method should not be trusted, and the caller of the\n   * method should not even be restricted to any single registry. Anyone should\n   * be able call it, and the input should be validated, there is no guarantee\n   * that the data passed in is the performData returned from checkUpkeep. This\n   * could happen due to malicious keepers, racing keepers, or simply a state\n   * change while the performUpkeep transaction is waiting for confirmation.\n   * Always validate the data passed in.\n   * @param performData is the data which was passed back from the checkData\n   * simulation. If it is encoded, it can easily be decoded into other types by\n   * calling `abi.decode`. This data should not be trusted, and should be\n   * validated against the contract's current state.\n   */\n  function performUpkeep(bytes calldata performData) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}